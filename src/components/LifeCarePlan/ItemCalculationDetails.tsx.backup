import React from 'react';
import { 
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Calculator } from "lucide-react";
import { Separator } from "@/components/ui/separator";
import { Badge } from "@/components/ui/badge";
import { ScrollArea } from "@/components/ui/scroll-area";
import { CareItem } from "@/types/lifecare";
import { isOneTimeItem } from "@/utils/export/utils";
import Decimal from 'decimal.js';

// Configure Decimal.js for financial calculations
Decimal.set({ precision: 20, rounding: Decimal.ROUND_HALF_EVEN });

interface ItemCalculationDetailsProps {
  item: CareItem;
  currentAge?: number;
  lifeExpectancy?: number;
}

const ItemCalculationDetails: React.FC<ItemCalculationDetailsProps> = ({
  item,
  currentAge,
  lifeExpectancy
}) => {
  const isOneTime = isOneTimeItem(item);
  
  // Parse frequency for display
  const parsedFrequency = isOneTime ? 0 : 
    (item.frequency.toLowerCase().includes('week') ? Math.round(parseInt(item.frequency.match(/\d+/)?.[0] || '1') * 52.1429) : 
     item.frequency.toLowerCase().includes('month') ? parseInt(item.frequency.match(/\d+/)?.[0] || '1') * 12 : 
     item.frequency.toLowerCase().includes('day') ? parseInt(item.frequency.match(/\d+/)?.[0] || '1') * 365 : 
     parseInt(item.frequency.match(/\d+/)?.[0] || '1'));
  
  // For display purposes only, not used in calculations
  const duration = 29;
  
  // For one-time items, use the full cost range
  const itemCostLow = new Decimal(item.costRange.low || 0);
  const itemCostAvg = new Decimal(item.costRange.average || 0);
  const itemCostHigh = new Decimal(item.costRange.high || 0);
  
  // The base cost is already the correct value, no need to apply frequency multiplier
  // as it's already factored into the data
  const annualCost = isOneTime ? 0 : itemCostAvg.toNumber();
  
  // The lifetime cost is the same as the annual cost, as the duration
  // is already factored into the data elsewhere
  const lifetimeCost = isOneTime 
    ? itemCostAvg.toNumber()
    : annualCost;
  
  // Format currency for display
  const formatCurrency = (value: number) => {
    if (isNaN(value) || value === null || value === undefined) return "$0.00";
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: 'USD'
    }).format(value);
  };
  
  // Helper function to safely format numbers
  const safeFormat = (value: any) => {
    if (value === undefined || value === null || isNaN(Number(value))) return "$0.00";
    return formatCurrency(Number(value));
  };
  
  // Helper function to safely format decimal numbers
  const safeFormatDecimal = (value: any, decimals: number = 4) => {
    if (value === undefined || value === null || isNaN(Number(value))) return "0.0000";
    return Number(value).toFixed(decimals);
  };
  
  // Get MFR values, with improved validation
  const getMFRValues = () => {
    // Try to get the values from mfrMin/mfrMax
    let min = 0;
    let max = 0;
    let factor = 1;
    
    if (item.mfrMin !== undefined && item.mfrMin !== null && !isNaN(Number(item.mfrMin))) {
      min = Number(item.mfrMin);
    }
    
    if (item.mfrMax !== undefined && item.mfrMax !== null && !isNaN(Number(item.mfrMax))) {
      max = Number(item.mfrMax);
    }
    
    if (item.mfrFactor !== undefined && item.mfrFactor !== null && !isNaN(Number(item.mfrFactor))) {
      factor = Number(item.mfrFactor);
    }
    
    // Calculate average, handling edge cases
    const avg = min && max ? (min + max) / 2 : (min || max || 0);
    
    return {
      min,
      max,
      avg,
      factor
    };
  };
  
  // Get PFR values, with improved validation
  const getPFRValues = () => {
    // Try to get the values from pfrMin/pfrMax
    let min = 0;
    let max = 0;
    let factor = 1;
    
    if (item.pfrMin !== undefined && item.pfrMin !== null && !isNaN(Number(item.pfrMin))) {
      min = Number(item.pfrMin);
    }
    
    if (item.pfrMax !== undefined && item.pfrMax !== null && !isNaN(Number(item.pfrMax))) {
      max = Number(item.pfrMax);
    }
    
    if (item.pfrFactor !== undefined && item.pfrFactor !== null && !isNaN(Number(item.pfrFactor))) {
      factor = Number(item.pfrFactor);
    }
    
    // Calculate average, handling edge cases
    const avg = min && max ? (min + max) / 2 : (min || max || 0);
    
    return {
      min,
      max,
      avg,
      factor
    };
  };
  
  // Check if we have fee schedule data with improved validation
  const hasMFRData = item.mfrMin !== undefined && item.mfrMin !== null && !isNaN(Number(item.mfrMin));
  const hasPFRData = item.pfrMin !== undefined && item.pfrMin !== null && !isNaN(Number(item.pfrMin));
  const hasFeeScheduleData = hasMFRData || hasPFRData;
  
  // Get the values
  const mfrValues = getMFRValues();
  const pfrValues = getPFRValues();
  
  // Calculate combined base rates with improved validation
  const calculateCombinedRate = (mfrValue: number, pfrValue: number, mfrFactor: number, pfrFactor: number) => {
    if (mfrValue && pfrValue) {
      return ((mfrValue * mfrFactor) + (pfrValue * pfrFactor)) / 2;
    } else if (mfrValue) {
      return mfrValue * mfrFactor;
    } else if (pfrValue) {
      return pfrValue * pfrFactor;
    }
    return 0;
  };
  
  const combinedLow = calculateCombinedRate(mfrValues.min, pfrValues.min, mfrValues.factor, pfrValues.factor);
  const combinedHigh = calculateCombinedRate(mfrValues.max, pfrValues.max, mfrValues.factor, pfrValues.factor);
  const combinedAvg = (combinedLow + combinedHigh) / 2 || 0;
  
  return (
    <Dialog>
      <DialogTrigger asChild>
        <Button variant="ghost" size="sm" className="h-8 px-2">
          <Calculator className="h-4 w-4 mr-1" />
          <span className="text-xs">Calculation Details</span>
        </Button>
      </DialogTrigger>
      <DialogContent className="max-w-2xl max-h-[90vh]">
        <DialogHeader>
          <DialogTitle>Calculation Details: {item.service}</DialogTitle>
          <DialogDescription>
            Complete breakdown of all variables and calculations for this item
          </DialogDescription>
        </DialogHeader>
        
        <ScrollArea className="h-[calc(90vh-120px)] mt-4 pr-4">
          <div className="space-y-6">
            {/* Input Variables Section */}
            <div>
              <h3 className="text-lg font-medium mb-2">Input Variables</h3>
              <div className="grid grid-cols-2 gap-4">
                <div className="border rounded-md p-3">
                  <h4 className="text-sm font-medium mb-1">Base Rate (Raw)</h4>
                  <div className="flex justify-between">
                    <span className="text-sm">Low:</span>
                    <span className="font-mono text-sm">{formatCurrency(item.costRange.low)}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-sm">Average:</span>
                    <span className="font-mono text-sm">{formatCurrency(item.costRange.average)}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-sm">High:</span>
                    <span className="font-mono text-sm">{formatCurrency(item.costRange.high)}</span>
                  </div>
                  <div className="mt-1 text-xs text-gray-500">
                    <strong>Raw base rates before any multipliers</strong>
                  </div>
                </div>
                
                {/* MFR and PFR Percentiles */}
                {hasFeeScheduleData && (
                  <div className="border rounded-md p-3">
                    <h4 className="text-sm font-medium mb-1">Fee Schedule Percentiles</h4>
                    {hasMFRData && (
                      <div className="mb-2">
                        <p className="text-xs text-gray-500">MFR</p>
                        <div className="grid grid-cols-2 gap-2">
                          <div>
                            <p className="text-xs text-gray-500">50th Percentile:</p>
                            <p className="text-sm">{safeFormat(mfrValues.min)}</p>
                          </div>
                          <div>
                            <p className="text-xs text-gray-500">75th Percentile:</p>
                            <p className="text-sm">{safeFormat(mfrValues.max)}</p>
                          </div>
                          <div>
                            <p className="text-xs text-gray-500">Geographic Factor:</p>
                            <p className="text-sm">{safeFormatDecimal(mfrValues.factor)}</p>
                          </div>
                          <div>
                            <p className="text-xs text-gray-500">Adjusted Average:</p>
                            <p className="text-sm">{safeFormat(mfrValues.avg * mfrValues.factor)}</p>
                          </div>
                        </div>
                      </div>
                    )}
                    
                    {hasPFRData && (
                      <div className="mb-2">
                        <p className="text-xs text-gray-500">PFR</p>
                        <div className="grid grid-cols-2 gap-2">
                          <div>
                            <p className="text-xs text-gray-500">50th Percentile:</p>
                            <p className="text-sm">{safeFormat(pfrValues.min)}</p>
                          </div>
                          <div>
                            <p className="text-xs text-gray-500">75th Percentile:</p>
                            <p className="text-sm">{safeFormat(pfrValues.max)}</p>
                          </div>
                          <div>
                            <p className="text-xs text-gray-500">Geographic Factor:</p>
                            <p className="text-sm">{safeFormatDecimal(pfrValues.factor)}</p>
                          </div>
                          <div>
                            <p className="text-xs text-gray-500">Adjusted Average:</p>
                            <p className="text-sm">{safeFormat(pfrValues.avg * pfrValues.factor)}</p>
                          </div>
                        </div>
                      </div>
                    )}
                    
                    {hasMFRData && hasPFRData && (
                      <div className="mt-2">
                        <p className="text-xs text-gray-500">Combined Base Rate</p>
                        <div className="grid grid-cols-3 gap-2">
                          <div>
                            <p className="text-xs text-gray-500">Low:</p>
                            <p className="text-sm">{safeFormat(combinedLow)}</p>
                          </div>
                          <div>
                            <p className="text-xs text-gray-500">High:</p>
                            <p className="text-sm">{safeFormat(combinedHigh)}</p>
                          </div>
                          <div>
                            <p className="text-xs text-gray-500">Average:</p>
                            <p className="text-sm">{safeFormat(combinedAvg)}</p>
                          </div>
                        </div>
                      </div>
                    )}
                  </div>
                )}
                
                <div className="border rounded-md p-3">
                  <h4 className="text-sm font-medium mb-1">Frequency</h4>
                  <div className="flex justify-between">
                    <span className="text-sm">Raw:</span>
                    <span className="font-mono text-sm">{item.frequency}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-sm">Annual:</span>
                    <span className="font-mono text-sm">{parsedFrequency} times/year</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-sm">Type:</span>
                    <Badge variant="outline" className={isOneTime ? "bg-blue-50" : "bg-green-50"}>
                      {isOneTime ? "One-time" : "Recurring"}
                    </Badge>
                  </div>
                </div>
                
                <div className="border rounded-md p-3">
                  <h4 className="text-sm font-medium mb-1">Duration</h4>
                  {item.startAge && (
                    <div className="flex justify-between">
                      <span className="text-sm">Start Age:</span>
                      <span className="font-mono text-sm">{item.startAge} years</span>
                    </div>
                  )}
                  {item.endAge && (
                    <div className="flex justify-between">
                      <span className="text-sm">End Age:</span>
                      <span className="font-mono text-sm">{item.endAge} years</span>
                    </div>
                  )}
                  <div className="flex justify-between">
                    <span className="text-sm">Duration:</span>
                    <span className="font-mono text-sm">{duration} years</span>
                  </div>
                  <div className="mt-1 text-xs text-gray-500">
                    {item.startAge && item.endAge 
                      ? "Calculated from age range" 
                      : "Using default duration"}
                  </div>
                </div>
                
                {item.cptCode && (
                  <div className="border rounded-md p-3">
                    <h4 className="text-sm font-medium mb-1">CPT Code Info</h4>
                    <div className="flex justify-between">
                      <span className="text-sm">Code:</span>
                      <span className="font-mono text-sm">{item.cptCode}</span>
                    </div>
                    <div className="mt-1 text-xs text-gray-500">
                      Base rates derived from CPT code data
                    </div>
                  </div>
                )}
                
                {/* Geographic Adjustment Factors */}
                {(mfrValues.factor !== 1 || pfrValues.factor !== 1) && (
                  <div className="border rounded-md p-3">
                    <h4 className="text-sm font-medium mb-1">Geographic Adjustments</h4>
                    {mfrValues.factor !== 1 && (
                      <div className="flex justify-between">
                        <span className="text-sm">MFR Factor:</span>
                        <span className="font-mono text-sm">{safeFormatDecimal(mfrValues.factor)}</span>
                      </div>
                    )}
                    {pfrValues.factor !== 1 && (
                      <div className="flex justify-between">
                        <span className="text-sm">PFR Factor:</span>
                        <span className="font-mono text-sm">{safeFormatDecimal(pfrValues.factor)}</span>
                      </div>
                    )}
                    <div className="mt-1 text-xs text-gray-500">
                      Geographic adjustment factors applied to base rates
                    </div>
                  </div>
                )}
                
                {currentAge && (
                  <div className="border rounded-md p-3">
                    <h4 className="text-sm font-medium mb-1">Patient Info</h4>
                    <div className="flex justify-between">
                      <span className="text-sm">Current Age:</span>
                      <span className="font-mono text-sm">{currentAge} years</span>
                    </div>
                    {lifeExpectancy && (
                      <div className="flex justify-between">
                        <span className="text-sm">Life Expectancy:</span>
                        <span className="font-mono text-sm">{lifeExpectancy} years</span>
                      </div>
                    )}
                  </div>
                )}
              </div>
            </div>
            
            <Separator />
            
            {/* Calculation Steps Section */}
            <div>
              <h3 className="text-lg font-medium mb-2">Calculation Steps</h3>
              <div className="space-y-4">
                {/* Base Rate Calculation */}
                {hasFeeScheduleData && (
                  <div className="border rounded-md p-3">
                    <h4 className="text-sm font-medium mb-2">Base Rate Calculation</h4>
                    <div className="bg-gray-50 p-2 rounded-md">
                      <div className="font-mono text-sm">
                        Base Rate = Average of Fee Schedule Percentiles with Geographic Adjustment
                      </div>
                      {hasMFRData && hasPFRData && (
                        <>
                          <div className="font-mono text-sm mt-1">
                            MFR 50th: ${safeFormatDecimal(mfrValues.min, 2)}
                          </div>
                          <div className="font-mono text-sm">
                            MFR Factor: {safeFormatDecimal(mfrValues.factor)}
                          </div>
                          <div className="font-mono text-sm">
                            Adjusted MFR 50th: ${safeFormatDecimal(mfrValues.min * mfrValues.factor, 2)}
                          </div>
                          <div className="font-mono text-sm mt-1">
                            PFR 50th: ${safeFormatDecimal(pfrValues.min, 2)}
                          </div>
                          <div className="font-mono text-sm">
                            PFR Factor: {safeFormatDecimal(pfrValues.factor)}
                          </div>
                          <div className="font-mono text-sm">
                            Adjusted PFR 50th: ${safeFormatDecimal(pfrValues.min * pfrValues.factor, 2)}
                          </div>
                          <div className="font-mono text-sm">
                            Average Low: (${safeFormatDecimal(mfrValues.min * mfrValues.factor, 2)} + ${safeFormatDecimal(pfrValues.min * pfrValues.factor, 2)}) ÷ 2 = ${safeFormatDecimal(combinedLow, 2)}
                          </div>
                          {mfrValues.max > 0 && pfrValues.max > 0 && (
                            <>
                              <div className="font-mono text-sm mt-1">
                                MFR 75th: ${safeFormatDecimal(mfrValues.max, 2)}
                              </div>
                              <div className="font-mono text-sm">
                                Adjusted MFR 75th: ${safeFormatDecimal(mfrValues.max * mfrValues.factor, 2)}
                              </div>
                              <div className="font-mono text-sm mt-1">
                                PFR 75th: ${safeFormatDecimal(pfrValues.max, 2)}
                              </div>
                              <div className="font-mono text-sm">
                                Adjusted PFR 75th: ${safeFormatDecimal(pfrValues.max * pfrValues.factor, 2)}
                              </div>
                              <div className="font-mono text-sm">
                                Average High: (${safeFormatDecimal(mfrValues.max * mfrValues.factor, 2)} + ${safeFormatDecimal(pfrValues.max * pfrValues.factor, 2)}) ÷ 2 = ${safeFormatDecimal(combinedHigh, 2)}
                              </div>
                            </>
                          )}
                        </>
                      )}
                      {hasMFRData && !hasPFRData && (
                        <div className="font-mono text-sm mt-1">
                          Using MFR: ${safeFormatDecimal(mfrValues.min, 2)} to ${safeFormatDecimal(mfrValues.max, 2)}
                        </div>
                      )}
                      {!hasMFRData && hasPFRData && (
                        <div className="font-mono text-sm mt-1">
                          Using PFR: ${safeFormatDecimal(pfrValues.min, 2)} to ${safeFormatDecimal(pfrValues.max, 2)}
                        </div>
                      )}
                    </div>
                    <div className="mt-2 text-xs text-gray-500">
                      <p>Base rates are derived from MFR and/or PFR fee schedules</p>
                    </div>
                  </div>
                )}
                
                {/* Geographic Adjustment Step */}
                {(mfrValues.factor !== 1 || pfrValues.factor !== 1) && (
                  <div className="border rounded-md p-3">
                    <h4 className="text-sm font-medium mb-2">Geographic Adjustment Calculation</h4>
                    <div className="bg-gray-50 p-2 rounded-md">
                      <div className="font-mono text-sm">
                        Base Rate × Geographic Factor = Adjusted Base Rate
                      </div>
                      {mfrValues.factor !== 1 && mfrValues.min > 0 && (
                        <div className="font-mono text-sm mt-1">
                          MFR: ${safeFormatDecimal(mfrValues.min, 2)} × {safeFormatDecimal(mfrValues.factor)} = ${safeFormatDecimal(mfrValues.min * mfrValues.factor, 2)}
                        </div>
                      )}
                      {pfrValues.factor !== 1 && pfrValues.min > 0 && (
                        <div className="font-mono text-sm mt-1">
                          PFR: ${safeFormatDecimal(pfrValues.min, 2)} × {safeFormatDecimal(pfrValues.factor)} = ${safeFormatDecimal(pfrValues.min * pfrValues.factor, 2)}
                        </div>
                      )}
                    </div>
                    <div className="mt-2 text-xs text-gray-500">
                      <p>Geographic factors adjust base rates based on location</p>
                    </div>
                  </div>
                )}
                
                {!isOneTime && (
                  <div className="border rounded-md p-3">
                    <h4 className="text-sm font-medium mb-2">Annual Cost Calculation</h4>
                    <div className="bg-gray-50 p-2 rounded-md">
                      <div className="font-mono text-sm">
                        Base Rate × Annual Frequency = Annual Cost
                      </div>
                      <div className="font-mono text-sm mt-1">
                        {formatCurrency(item.costRange.average)} × {parsedFrequency} = {formatCurrency(annualCost)}
                      </div>
                    </div>
                    <div className="mt-2 text-xs text-gray-500">
                      <p>Using Decimal.js for precise financial calculations</p>
                      <p className="font-mono">new Decimal({item.costRange.average}).times({parsedFrequency})</p>
                    </div>
                  </div>
                )}
                
                  <div className="border rounded-md p-3">
                    <h4 className="text-sm font-medium mb-2">Lifetime Cost Calculation</h4>
                    <div className="bg-gray-50 p-2 rounded-md">
                      {isOneTime ? (
                        <>
                          <div className="font-mono text-sm">
                            Base Rate Range = Lifetime Cost Range (One-time item)
                          </div>
                          {hasMFRData && hasPFRData ? (
                            <>
                              <div className="font-mono text-sm mt-1">
                                <div>Low: (MFR 50th + PFR 50th) ÷ 2 = {formatCurrency(item.costRange.low)}</div>
                                <div>High: (MFR 75th + PFR 75th) ÷ 2 = {formatCurrency(item.costRange.high)}</div>
                                <div>Average: (Low + High) ÷ 2 = {formatCurrency(item.costRange.average)} = {formatCurrency(lifetimeCost)}</div>
                              </div>
                              <div className="mt-2 text-xs text-gray-500">
                                <p>Using Decimal.js for precise financial calculations</p>
                                <p className="font-mono">Low: new Decimal({item.costRange.low})</p>
                                <p className="font-mono">Average: new Decimal({item.costRange.average})</p>
                                <p className="font-mono">High: new Decimal({item.costRange.high})</p>
                                <p className="font-mono">Values should be different if GAF adjustments are applied correctly</p>
                              </div>
                            </>
                          ) : (
                            <div className="font-mono text-sm mt-1">
                              <div>Low: {formatCurrency(item.costRange.low)}</div>
                              <div>Average: {formatCurrency(item.costRange.average)} = {formatCurrency(lifetimeCost)}</div>
                              <div>High: {formatCurrency(item.costRange.high)}</div>
                              <div className="mt-2 text-xs text-gray-500">
                                <p>Values should be different if GAF adjustments are applied correctly</p>
                              </div>
                            </div>
                          )}
                        </>
                      ) : (
                      <>
                        <div className="font-mono text-sm">
                          Annual Cost × Duration = Lifetime Cost
                        </div>
                        <div className="font-mono text-sm mt-1">
                          {formatCurrency(annualCost)} × {duration} = {formatCurrency(lifetimeCost)}
                        </div>
                      </>
                    )}
                  </div>
                  <div className="mt-2 text-xs text-gray-500">
                    <p>Using Decimal.js for precise financial calculations</p>
                    {isOneTime ? (
                      <>
                        <p className="font-mono">Low: new Decimal({item.costRange.low})</p>
                        <p className="font-mono">Average: new Decimal({item.costRange.average})</p>
                        <p className="font-mono">High: new Decimal({item.costRange.high})</p>
                      </>
                    ) : (
                      <p className="font-mono">new Decimal({annualCost}).times({duration})</p>
                    )}
                  </div>
                </div>
              </div>
            </div>
            
            <Separator />
            
            {/* Final Results Section */}
            <div>
              <h3 className="text-lg font-medium mb-2">Final Results</h3>
              <div className="grid grid-cols-2 gap-4">
                {!isOneTime && (
                  <div className="border rounded-md p-3 bg-blue-50">
                    <h4 className="text-sm font-medium mb-1">Annual Cost</h4>
                    <p className="text-xl font-semibold">{formatCurrency(annualCost)}</p>
                    <p className="text-xs text-gray-600 mt-1">
                      Base rate × Frequency = Annual cost
                    </p>
                  </div>
                )}
                
                <div className="border rounded-md p-3 bg-green-50">
                  <h4 className="text-sm font-medium mb-1">Lifetime Cost</h4>
                  {isOneTime ? (
                    <>
                      <div className="flex justify-between items-center">
                        <span className="text-sm">Low:</span>
                        <span className="font-semibold">{formatCurrency(item.costRange.low)}</span>
                      </div>
                      <div className="flex justify-between items-center">
                        <span className="text-sm">Average:</span>
                        <span className="font-semibold">{formatCurrency(lifetimeCost)}</span>
                      </div>
                      <div className="flex justify-between items-center">
                        <span className="text-sm">High:</span>
                        <span className="font-semibold">{formatCurrency(item.costRange.high)}</span>
                      </div>
                      <p className="text-xs text-gray-600 mt-1">
                        Base rate range (one-time cost)
                      </p>
                    </>
                  ) : (
                    <>
                      <p className="text-xl font-semibold">{formatCurrency(lifetimeCost)}</p>
                      <p className="text-xs text-gray-600 mt-1">
                        Annual cost × Duration
                      </p>
                    </>
                  )}
                </div>
              </div>
            </div>
          </div>
        </ScrollArea>
      </DialogContent>
    </Dialog>
  );
};

export default ItemCalculationDetails;
